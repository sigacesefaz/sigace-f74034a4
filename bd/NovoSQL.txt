-- First, let's improve the processes table to store the main process information
ALTER TABLE processes 
ADD COLUMN cnj_number VARCHAR,
ADD COLUMN court_id VARCHAR,
ADD COLUMN instance VARCHAR;

-- Create a proper structure for process_parties that accurately represents the party data
DROP TABLE IF EXISTS process_parties;
CREATE TABLE process_parties (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  process_id UUID REFERENCES processes(id) ON DELETE CASCADE,
  name VARCHAR NOT NULL,
  type VARCHAR NOT NULL,
  person_type VARCHAR,
  document VARCHAR,
  subtype VARCHAR,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS on process_parties
ALTER TABLE process_parties ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for process_parties
CREATE POLICY "Users can view their own process parties"
  ON process_parties FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own process parties"
  ON process_parties FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own process parties"
  ON process_parties FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own process parties"
  ON process_parties FOR DELETE
  USING (auth.uid() = user_id);

-- Create a table for process_hits to store each procedural movement (hit)
CREATE TABLE process_hits (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  process_id UUID REFERENCES processes(id) ON DELETE CASCADE,
  hit_index VARCHAR,
  hit_id VARCHAR,
  hit_score NUMERIC,
  tribunal VARCHAR,
  numero_processo VARCHAR,
  data_ajuizamento TIMESTAMP WITH TIME ZONE,
  grau VARCHAR,
  nivel_sigilo INTEGER,
  formato JSONB,
  sistema JSONB,
  classe JSONB,
  orgao_julgador JSONB,
  data_hora_ultima_atualizacao TIMESTAMP WITH TIME ZONE,
  valor_causa NUMERIC(15,2),
  situacao JSONB,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS on process_hits
ALTER TABLE process_hits ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for process_hits
CREATE POLICY "Users can view their own process hits"
  ON process_hits FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own process hits"
  ON process_hits FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own process hits"
  ON process_hits FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own process hits"
  ON process_hits FOR DELETE
  USING (auth.uid() = user_id);

-- Improve process_movements table (connects to a specific hit)
DROP TABLE IF EXISTS process_movements;
CREATE TABLE process_movements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  process_id UUID REFERENCES processes(id) ON DELETE CASCADE,
  hit_id UUID REFERENCES process_hits(id) ON DELETE CASCADE,
  codigo INTEGER,
  nome TEXT,
  data_hora TIMESTAMP WITH TIME ZONE,
  tipo VARCHAR,
  complemento TEXT,
  complementos_tabelados JSONB DEFAULT '[]',
  orgao_julgador JSONB,
  movimento_principal_id UUID REFERENCES process_movements(id),
  json_completo JSONB,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS on process_movements
ALTER TABLE process_movements ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for process_movements
CREATE POLICY "Users can view their own process movements"
  ON process_movements FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own process movements"
  ON process_movements FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own process movements"
  ON process_movements FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own process movements"
  ON process_movements FOR DELETE
  USING (auth.uid() = user_id);

-- Improve process_subjects table (connects to a specific hit)
DROP TABLE IF EXISTS process_subjects;
CREATE TABLE process_subjects (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  process_id UUID REFERENCES processes(id) ON DELETE CASCADE,
  hit_id UUID REFERENCES process_hits(id) ON DELETE CASCADE,
  codigo INTEGER,
  nome VARCHAR,
  principal BOOLEAN DEFAULT false,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS on process_subjects
ALTER TABLE process_subjects ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for process_subjects
CREATE POLICY "Users can view their own process subjects"
  ON process_subjects FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own process subjects"
  ON process_subjects FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own process subjects"
  ON process_subjects FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own process subjects"
  ON process_subjects FOR DELETE
  USING (auth.uid() = user_id);

-- Create a table for decisions related to the process
CREATE TABLE process_judicial_decisions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  process_id UUID REFERENCES processes(id) ON DELETE CASCADE,
  hit_id UUID REFERENCES process_hits(id) ON DELETE CASCADE,
  decision_type VARCHAR,
  decision_date TIMESTAMP WITH TIME ZONE,
  judge VARCHAR,
  content TEXT,
  attachments JSONB DEFAULT '[]',
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS on process_judicial_decisions
ALTER TABLE process_judicial_decisions ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for process_judicial_decisions
CREATE POLICY "Users can view their own process decisions"
  ON process_judicial_decisions FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own process decisions"
  ON process_judicial_decisions FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own process decisions"
  ON process_judicial_decisions FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own process decisions"
  ON process_judicial_decisions FOR DELETE
  USING (auth.uid() = user_id);

-- Keep the raw JSON in process_details for reference
DROP TABLE IF EXISTS process_details;
CREATE TABLE process_details (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  process_id UUID REFERENCES processes(id) ON DELETE CASCADE,
  tribunal VARCHAR,
  data_ajuizamento TIMESTAMP WITH TIME ZONE,
  grau VARCHAR,
  nivel_sigilo INTEGER DEFAULT 0,
  orgao_julgador JSONB,
  formato JSONB DEFAULT '{"nome": "Eletr√¥nico", "codigo": 1}'::JSONB,
  sistema JSONB DEFAULT '{"nome": "PJe", "codigo": 1}'::JSONB,
  classe JSONB,
  assuntos JSONB,
  movimentos JSONB,
  partes JSONB,
  data_hora_ultima_atualizacao TIMESTAMP WITH TIME ZONE,
  json_completo JSONB,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Enable RLS on process_details
ALTER TABLE process_details ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for process_details
CREATE POLICY "Users can view their own process details"
  ON process_details FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own process details"
  ON process_details FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own process details"
  ON process_details FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own process details"
  ON process_details FOR DELETE
  USING (auth.uid() = user_id);

-- Add automatic updated_at triggers for all tables that need it
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_process_parties_updated_at
BEFORE UPDATE ON process_parties
FOR EACH ROW EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_process_hits_updated_at
BEFORE UPDATE ON process_hits
FOR EACH ROW EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_process_judicial_decisions_updated_at
BEFORE UPDATE ON process_judicial_decisions
FOR EACH ROW EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_process_details_updated_at
BEFORE UPDATE ON process_details
FOR EACH ROW EXECUTE FUNCTION update_updated_at();
